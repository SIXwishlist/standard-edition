image: ruby:2.3

stages:
  - build
  - deploy

variables:
  # Timezone will be used both for system and php date.timezone php.ini value
  TIMEZONE: "Europe/Paris"

example_build:
  stage: build
  image: tetraweb/php:7.1
  only:
    - develop
    - tags
  cache:
    paths:
      - vendor/
  artifacts:
    expire_in: 1 hour
    paths:
      - vendor/
      # Replace with your own theme path
      - themes/BaseTheme/
      # Keep themes assets to include them in docker image
      - web/themes/
  before_script:
    - docker-php-ext-enable intl
    - docker-php-ext-enable gd
    - docker-php-ext-enable pdo_mysql
    - curl -sL https://deb.nodesource.com/setup_8.x | bash -
    - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
    - echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
    - apt-get update -qq
    - apt-get install -y unzip nodejs yarn build-essential
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php composer-setup.php
    - php -r "unlink('composer-setup.php');"
    # Paste the PRIVATE key into a gitlab variable.
    # Pay attention to the linebreak at the end when pasting
    # Composer private key is required if you need private dependencies.
    # **Uncomment only if using private composer packages**
    #- mkdir -p ~/.ssh
    #- echo "$COMPOSER_SERVER_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    #- chmod 600 ~/.ssh/id_rsa
    #- eval "$(ssh-agent -s)"
    #- ssh-add ~/.ssh/id_rsa
    ## Use your Gitlab instance URL
    #- ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
  script:
    # Replace with your own theme path
    - cd themes/BaseTheme
    - npm install
    # Using Yarn with yarn.lock
    #- yarn install --pure-lockfile
    - npm run build
    - cd ../../
    # DO NOT USE --classmap-authoritative as we are going to generate nsentities on the goâ€¦
    - php composer.phar install --no-dev --optimize-autoloader --apcu-autoloader --no-scripts
    - php composer.phar run-script post-install-cmd
    # Create hard copies of theme assets
    - php composer.phar run-script pre-docker
    # Remove useless node_modules
    - rm -rf themes/BaseTheme/node_modules
    - rm -rf web/dev.php
    - rm -rf web/install.php

#
# Build App docker image with vendor and built assets
# included. You must configure your Gitlab Runner to
# support Docker-in-docker commands.
#
example_docker:
  stage: deploy
  image: docker:git
  # Create a docker image only when a new tag is pushed
  only:
    - tags
  services:
    - docker:17.09-dind
  when: on_success
  dependencies:
    - example_build
  script:
    # Connect to your Gitlab Registry
    - "echo \"Registry image: ${CI_REGISTRY_IMAGE} for tag ${CI_COMMIT_TAG}\""
    - "docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}"
    # App image build
    - "docker build -t ${CI_REGISTRY_IMAGE} ."
    - "docker tag ${CI_REGISTRY_IMAGE} ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
    - "docker push ${CI_REGISTRY_IMAGE}:latest"
    - "docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"


